#+TITLE: Readme

* Tabella dei contenuti :TOC:
- [[#descrizione-del-progetto][Descrizione del progetto]]
  - [[#home-page][Home page]]
  - [[#popolazione-del-database][Popolazione del database]]
  - [[#pagine-vtuber][Pagine VTuber]]
- [[#setup][Setup]]
  - [[#configurazione-ed-installazione-server][Configurazione ed installazione server]]
  - [[#esecuzione-server][Esecuzione server]]
- [[#realizzazione][Realizzazione]]
  - [[#entry-point---indexphp][Entry point - index.php]]
  - [[#core][Core]]
  - [[#views][Views]]

* Descrizione del progetto
Su [questo-sito] è possibile registrare un account con cui si può tenere traccia di:
- Anime visti
- Manga letti
- Visual novel giocate
- Light novel lette

Inoltre è possibile realizzare una lista di VTuber preferite, seguire le loro live e ricevere notifiche via e-mail quando sono in live.

** Home page
Nella home page è possibile vedere una lista delle ultime uscite divise per categoria [anime, manga, LN, VN] e per genere [azione, horror, sportivo, sci-fi, ...].

** Popolazione del database
Sarà compito dell'utente registrato creare un nuovo record per aggiungere una serie di una specifica categoria al database.
Una volta creato il record, chiunque altro sia registrato è in grado di apportare modifiche.
Questo processo lo effettua attraverso una pagina di registrazione, dove l'utente dovrà inserire:

*** ... per gli anime
- Titolo
- Tipo di anime [film, serie TV, speciale]
- Stato pubblicazione
    + Numero episodi se lo stato è *concluso*
- Data di inizio/fine pubblicazione
- Trama
- Generi
- Immagine di copertina

*** ... per manga e light novel
- Titolo
- Stato pubblicazione
  + Numero di capitoli e volumi se lo stato è *concluso*
- Data di inizio/fine pubblicazione
- Trama
- Generi
- Immagine di copertina

*** ... per visual novel
- Titolo
- Link del seller
- Trama
- Generi
- Immagine di copertina

** Pagine VTuber
Speciale pagina da cui poter partecipare alla stream della particolare VTuber direttamente, senza bisogno di recarsi sulla pagina YouTube/Twitch dell'idol in questione.
Se l'idol non è attualmente live viene mostrata una pagina che notifica l'utente che lo stream è offline.

* Setup
** Configurazione ed installazione server
*** Server web - Nginx
Ho deciso di utilizzare Nginx come web server per le performance nettamente migliori e leggerezza in confronto ad altri web server.
L'installazione viene effettuata tramite un docker container e la seguente container image:
#+begin_src dockerfile :tangle dockerfiles/web/Dockerfile
FROM php:8.1.4-fpm-alpine3.14
WORKDIR /var/www/html

RUN apk update && apk add --no-cache \
    php8 \
    php8-fpm \
    php8-mysqli \
    nginx

RUN docker-php-ext-install pdo pdo_mysql mysqli
RUN docker-php-ext-enable pdo_mysql

RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
RUN php-fpm &

COPY nginx.conf /etc/nginx/nginx.conf
CMD php-fpm -D && nginx -g "daemon off;"
#+end_src

Nginx utilizza il seguente file di configurazione:
#+begin_src conf :tangle dockerfiles/web/nginx.conf
user nginx;
worker_processes 4;

error_log /var/log/nginx/error.log warn;

events {
    worker_connections 1024;
}

http {
        server {
               listen 80 default_server;
               listen [::]:80 default_server;

               root /var/www/html/pub;
               index index.php index.html index.htm index.nginx-debian.html;
               server_name _;

               location / {
                    try_files $uri $uri/ /index.php?$args;
               }

               location ~ \.php$ {
                    fastcgi_pass      127.0.0.1:9000;
                    fastcgi_index     index.php;
                    include           fastcgi.conf;
               }
        }
}
#+end_src


*** Server database - MariaDB
L'installazione del database server mariadb viene anch'essa eseguita tramite un docker container e la container image disponibile su [[https://hub.docker.com/_/mariadb][hub.docker]] per cui non ha bisogno di alcuna configurazione.

** Esecuzione server
Eseguire i seguenti comandi a riga di comando per creare e avviare i container:
#+begin_src sh
docker build -t nomeContainerImage dockerfiles/web
docker run -dp 80:80 -v "$PWD/www":/var/www/html nomeContainerImage

docker run -dp 3306:3306 -v "$PWD/DBfiles":/var/lib/mysql -e MARIADB_ROOT_PASSWORD=root --name animedb mariadb:latest --port 3306
#+end_src

* Realizzazione
La web app è strutturata seguendo il *Model View Controller* framework.
Per gestire le dipendenze e namespaces di PHP viene utilizzato *composer*.

** Entry point - index.php
La home page, si occupa di inizializzare l'applicazione ed impostare le route con annessa funzione di callback o *View*.

#+begin_src php :tangle www/pub/index.php
<?php
require_once __DIR__."/../vendor/autoload.php";
use app\core\Application;

$app = new Application(dirname(__DIR__));

$app->router->get("/", "home");
$app->router->get("/contact", "contact");

$app->router->post("/contact", function() {
    echo "handling submitted data";
});

$app->run();
?>
#+end_src

** Core
*** Main application class
La classe principale, si occupa di instanziare il Router e la Request helper class.

#+begin_src php :tangle www/core/Application.php
<?php
namespace app\core;

class Application {
    public Router $router;
    public Request $req;
    public Response $res;

    public static Application $app;
    public static string $ROOT_DIR;

    public function __construct(string $root) {
        self::$ROOT_DIR = $root;
        self::$app = $this;

        $this->req = new Request();
        $this->res = new Response();
        $this->router = new Router($this->req, $this->res);
    }

    public function run() {
        echo $this->router->resolve();
    }
}
?>
#+end_src

*** Router class
Una delle classi principali è il Router, gestisce l'array associativo "$routes" e la risoluzione delle varie request effettuate.

L'array associativo "$routes" è diviso in 2 grandi sottogruppi:
- sottogruppo "get"
- sottogruppo "post"

Ogni sottogruppo a sua volta è formato da 2 campi: "path" => "method".

#+begin_example
{
    ["get"] => {
        ["/"] => func(),
        ["/test"] => func(),
    },

    ["post"] => {
        ["/"] => func(),
        ["/test"] => func(),
    }
}
#+end_example

Metodi:
- "get()": imposta la route con metodo get
- "post()": imposta la route con metodo post
- "resolve()": utilizzando la Request helper class ricava quale funzione di callback chiamare sullo specifico path e metodo richiesto

#+begin_src php :tangle www/core/Router.php
<?php

namespace app\core;

class Router
{
    private array $routes = [];

    public Request $req;
    public Response $res;

    public function __construct(Request $req, Response $res)
    {
        $this->req = $req;
        $this->res = $res;
    }

    public function get($path, $callback)
    {
        $this->routes["get"][$path] = $callback;
    }

    public function post($path, $callback)
    {
        $this->routes["post"][$path] = $callback;
    }


    public function resolve()
    {
        $path = $this->req->getPath();
        $method = $this->req->getMethod();
        $callback = $this->routes[$method][$path] ?? false;

        if (is_string($callback)) {
            echo $this->renderView($callback);
        } else if ($callback) {
            return call_user_func($callback);
        } else {
            $this->res->setStatusCode(404);
            echo $this->renderView("404");
        }
    }

    public function renderView(string $view)
    {
        $layoutContent = $this->loadLayoutContent();
        $viewContent = $this->loadViewContent($view);

        return str_replace("{{content}}", $viewContent, $layoutContent);
    }

    private function loadLayoutContent() {
        ob_start();
        include_once Application::$ROOT_DIR."/views/layouts/main.php";
        return ob_get_clean();
    }

    private function loadViewContent(string $view) {
        ob_start();
        include_once Application::$ROOT_DIR."/views/$view.php";
        return ob_get_clean();
    }
}
?>
#+end_src

*** Request class
Una classe helper, analizza le requests e restituisce l'informazione necessaria al richiedente.

Metodi:
- "getPath()": restituisce il path richiesto, se viene passata una query string insieme al path essa non viene restituita. (Utile a Router resolve())
- "getMethod()": restituisce il metodo utilizzato nella request in minuscolo. (Utile a Router resolve())

#+begin_src php :tangle www/core/Request.php
<?php
namespace app\core;

class Request {
    public function getPath() {
        $path = $_SERVER["REQUEST_URI"] ?? "/";
        $position = strpos($path, "?");

        if (!$position) {
            return $path;
        }
        return substr($path, 0, $position);
    }

    public function getMethod() {
        return strtolower($_SERVER["REQUEST_METHOD"]);
    }

    public function getBody() {
        # TODO
    }
}
?>
#+end_src

*** Response class
#+begin_src php :tangle www/core/Response.php
<?php
namespace app\core;

class Response {
    public function setStatusCode(int $code) {
        http_response_code($code);
    }
}
?>
#+end_src

** Views
*** Home
#+begin_src php :tangle www/views/home.php
<h1>Hello, World!</h1>
#+end_src

*** Contact
#+begin_src php :tangle www/views/contact.php
<h1>Contact page</h1>

    <div class="container">
<form action="" method="post">
  <div class="mb-3">
    <label for="exampleInputEmail1" class="form-label">Email address</label>
    <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
    <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
  </div>
  <div class="mb-3">
    <label for="exampleInputPassword1" class="form-label">Password</label>
    <input type="password" class="form-control" id="exampleInputPassword1">
  </div>
  <div class="mb-3 form-check">
    <input type="checkbox" class="form-check-input" id="exampleCheck1">
    <label class="form-check-label" for="exampleCheck1">Check me out</label>
  </div>
  <button type="submit" class="btn btn-primary">Submit</button>
</form>
</div>
#+end_src

*** 404
#+begin_src php :tangle www/views/404.php
<h1>404 - File not found!</h1>
#+end_src
