#+TITLE: Readme

* Tabella dei contenuti :TOC:
- [[#descrizione-del-progetto][Descrizione del progetto]]
  - [[#home-page][Home page]]
  - [[#list-page][List page]]
- [[#progettazione][Progettazione]]
- [[#setup][Setup]]
  - [[#configurazione-ed-installazione-server][Configurazione ed installazione server]]

* Descrizione del progetto
Attraverso la web app è possibile visualizzare quali vtuber sono attualmente live e partecipare ad una di esse senza doversi recare sul sito di streaming da loro adottato.
Gli utenti registrati possono anche aggiungere una vtuber alla loro lista personale di vtuber preferite e ricevere una notifica via email quando una di esse va in onda.

Un utente può anche richiedere l'aggiunta di una vtuber al catalogo della web app, qualora essa non ne faccia già parte, semplicemente inviando, tramite l'apposito form, l'URL al canale della vtuber, sia esso su [[https://www.twitch.tv/][Twitch]] o [[https://www.youtube.com/][YouTube]].

** Home page
Attraverso la pagina "home" è possibile partecipare alla stream di una vtuber direttamente senza recarsi sul sito di streaming da loro utilizzato.
Appena si visita quasta pagina vengono visualizzate 2 liste:
- *In live*: lista di tutte le vtuber presenti nel catalogo attualmente in onda
- *Offline*: lista delle vtuber presenti nel catalogo attualmente non in onda

Se l'utente è registrato allora viene visualizzata un'ulteriore lista che mostra le live attualmente in onda dell vtuber preferite dall'utente.

L'aggiunta di una vtuber viene effettuata tramite l'apposito form visibile agli utenti registrati tramite il tasto "Add vtuber".
Una volta cliccato verrà chiesto all'utente l'inserimento dell'URL del canale della vtuber che desidera venga aggiunta al catalogo.

** List page
Attraverso la pagina "list", visibile solo agli utenti registrati, un utente può gestire le sue vtuber preferite.
L'utente può quindi:
- decidere di rimuovere una vtuber dai suoi preferiti
- disabilitare l'invio delle notifiche via email.

* Progettazione
[[./media/wbs.jpg]]

* Setup
** Configurazione ed installazione server
L'architettura a 3 livelli è un'architettura software che organizza il codice in 3 livelli logici:
- Presentation layer: interfaccia con l'utente
- Application layer: dove i dati vengono processati
- Data layer: dove i dati dell'applicazione vengono immagazzinati ed organizzati

Un vantaggio che offre questa architettura è la netta divisione delle 3 parti, questo permette la modifica o completo cambiamento di un layer senza andare ad influenzarne altri.

*** Presentation Layer - Nginx
Il presentation layer è il layer che si occupa dell'interazione con l'utente.
Il suo compito principale è quello di mostrare e ricevere informazioni dal client.

Ho deciso di utilizzare Nginx come web server per le migliori performance e leggerezza in confronto ad altri web server.
Inoltre la configura di Nginx è molto più semplice di web server come Apache.

*** Application Layer - PHP
L'application layer rappresenta il cuore dell'applicazione.
In questo layer le informazioni ricevute dal presentation layer vengono elaborate anche in base a dati presenti nel data layer.
L'application layer può inoltre aggiungere, cancellare e modificare i dati nel data layer.

Un docker container si occupa dell'esecuzione di php-fpm e rimane in ascolto sulla porta 9000, questo permette al presentation layer (nginx) di operare similarmente ad un *reverse proxy*: quando riceve una richiesta per una risorsa *.php la inoltra al server php-fpm.
[[./media/proxy.jpg]]

**** Reverse e Forward proxy
Un *forward proxy*, a differenza di un reverse, è logicamente situato /prima/ di un gruppo di macchine *client* e svolge il compito di *middleman* ricevendo le richieste dai client ed inviandole lui stesso a destinazione.
Utilizzando un forward proxy i server destinatari riceveranno richieste dall'indirizzo IP del proxy server e non del client originale, questo permette di nascondere il proprio indirizzo IP aumentando il proprio livello di sicurezza online.

Al contratio un *reverse proxy* è logicamente situato /prima/ di un gruppo di macchine *server* e svolge il compito di ricevere le richieste, analizzarle ed inviarle al server che ritiene più adatto all'elaborazione.

*** Data Layer - MariaDB
Il data layer si occupa della gestione ed immagazinamento dei dati generati dall'application layer.
/Il presentation layer non genera dati visto che opera come un reverse proxy./

L'installazione del database server mariadb viene anch'essa eseguita tramite un docker container e la container image disponibile su [[https://hub.docker.com/_/mariadb][hub.docker]] per cui non ha bisogno di alcuna configurazione.

**** Schema E/R ed analisi delle molteplicità
[[./media/dbER.jpg]]

Un utente può avere più vtuber preferite.
Una vtuber può essere la preferita di più utenti.

**** Schema logico
[[./media/dbLogico.jpg]]

Le tabelle principali sono 3:
- *users*: contiene i dati degli utenti
- *favoriteVtuber*: vista la possibilità di un utente di avere più vtuber preferite e di conseguenza un vtuber può essere la preferita di più utenti è necessario aggiunngere una tabella tra queste 2 tabelle
- *vtubers*: contiene i dati delle vtuber in elenco

La tabella *migrations* viene utilizzata per tenere traccia delle migrazioni applicate sul database.

Per effettuare una modifica al database si utilizza lo script PHP [[./www/migrationScript.php][migrationScript]], questo prende *in ordine* tutte le *classi migration* presenti nella directory [[./www/Migrations][Migrations]].
Lo script chiama di ogni classe il metodo "*up()*" che applica la modifica al database, crea una nuova entry nella tabella migrations per indicare che la migration in questione è stata applicata.
Prima di eseguire il metodo "up()" controlla che la migration non sia già stata applicata cercando una entry che abbia il nome della migration, se lo trova non esegue il metodo "up()" e prosegue con la successiva migration, se non lo trova deve eserguirla ed aggiungere una entry nella tabella.

